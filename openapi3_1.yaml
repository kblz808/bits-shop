openapi: 3.1.0
info:
  title: Bits Store - OpenAPI 3.1
  description: |-
    hello there
  contact:
    email: apiteam@swagger.io
  version: 0.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000/api
tags:
  - name: user
    description: Everything about your Pets
  - name: product
    description: Access to Petstore orders
  - name: bid
    description: Operations about user
paths:
  /user/register:
    post:
      tags:
        - user
      summary: Register a new user
      description: Register a new user
      operationId: updatePet
      requestBody:
        description: Register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user/login:
    post:
      tags:
        - user
      summary: Login user
      description: Login a user and receive a jwt token
      operationId: findPetsByStatus
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /product/create-product:
    get:
      tags:
        - user
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /product/get-product/{productId}:
    get:
      tags:
        - user
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - user
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - user
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - user
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /product/get-all-products:
    get:
      tags:
        - user
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /product/update-product:
    post:
      tags:
        - user
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /product/delete-product/{productId}:
    delete:
      tags:
        - user
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found

    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /bid/bid-request:
    post:
      tags:
        - bid
      summary: Creates new bid
      description: Creates a new bid on a given product
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BidRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresss'
        default:
          description: successful operation
  /product/get-bid-requests/{productId}:
    get:
      tags:
        - bid
      summary: Get all bids on a product
      description: ''
      operationId: logoutUser
      parameters:
        - name: productId
          in: path
          description: 'The product id'
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /bid/get-bid/{bidId}:
    get:
      tags:
        - bid
      summary: Get a specific bid
      description: ''
      operationId: getUserByName
      parameters:
        - name: bidId
          in: path
          description: 'The bid id used to retrieve a specific bid'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /bid/accept-bid/{bidId}:
    put:
      tags:
        - bid
      summary: Accept bid
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: bidId
          in: path
          description: bid id that will be accepted
          required: true
          schema:
            type: string
      requestBody:
        description: accept a bid
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /bid/reject-bid/{bidId}:
    put:
      tags:
        - bid
      summary: Reject a bid
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: bidId
          in: path
          description: bid id that will be rejected
          required: true
          schema:
            type: string
      requestBody:
        description: Reject a bid
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
components:
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: string
          examples: [66f3b68f6021f488235d35ce]
        first_name:
          type: string
          examples: [alex]
        last_name:
          type: string
          examples: [lion]
        username:
          type: string
          examples: [alex@123]
        phone_number:
          type: string
          examples: [0912345678]
        school_id:
          type: string
          examples: [ugrwse102113]
        email:
          type: string
          examples: [alex@gmail.com]
        password:
          type: string
          examples: [pa$$word]
        id_admin:
          type: boolean
          examples: [false]
        account_balance:
          type: integer
          format: int64
          examples: [10000]
        is_blocked:
          type: boolean
          examples: [false]
        purchased_products:
          type: array
        profile_img:
          type: string
        whichlist:
          type: array
    Customer:
      type: object
      properties:
        _id:
          type: string
          examples: [66f3b6f66021f488235d35d1]
        userId:
          type: string
          examples: [66f3b68f6021f488235d35ce]
        description:
          type: string
        images:
          type: array
        price:
          type: integer
          format: int64
        stock:
          type: integer
          format: int64
        is_approved:
          type: boolean
        status:
          type: string
          enum:
            - available
            - pending
            - sold
        categories:
          type: array
          items:
            type: string
    Address:
      type: object
      properties:
        productId:
          type: string
          examples: [66f3b6f66021f488235d35d1]
        bidderId:
          type: string
          examples: [66f3b68f6021f488235d35ce]
        amount:
          type: integer
          format: int64
          examples: [2000]
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Dogs]
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        username:
          type: string
          examples: [theUser]
        firstName:
          type: string
          examples: [John]
        lastName:
          type: string
          examples: [James]
        email:
          type: string
          examples: [john@email.com]
        password:
          type: string
          examples: ['12345']
        phone:
          type: string
          examples: ['12345']
        userStatus:
          type: integer
          description: User Status
          format: int32
          examples: [1]
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        name:
          type: string
          examples: [doggie]
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    BidRequest:
      required:
        - productId
        - bidderId
        - amount
      type: object
      properties:
        productId:
          type: string
          examples: [66f3b6f66021f488235d35d1]
        bidderId:
          type: string
          examples: [66f3b68f6021f488235d35ce]
        amount:
          type: integer
          format: int64
          exampples: [30000]
        message:
          type: string
          examples: [i would like to buy this product]
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
